import pandas as pd
import numpy as np

ser= pd.Series([1,2,3,4,5,6,np.nan,8,9,10])
print(ser)

d=pd.date_range('20200301',periods=10)
print(d)

df=pd.DataFrame(np.random.randn(10,4), index=d,columns=['A','B','C','D'])

df1=pd.DataFrame({'A':[1,2,3,4],
                'B':pd.Timestamp('20200301'),
                 'C':pd.Series(1, index=list(range(4)),dtype='float32'),
                'D':np.array([5]*4,dtype='int32'),
                'E':pd.Categorical(['True','False','True','False']),
                 'F':'Edureka'
                 } )
print(df)
print(df.dtypes)
#df.head()
#df.tail()
#df.index
#df.column
#df.to_numpy()
#df.describe()

df.sort_index(axis=1,ascending=False)
df.sort_values(by='C')
df['C'] # single column
df[0:3] # print rows
df.loc[d[0]] # row wise
df.loc[:,['A','C']] # muktiple rows
df.loc['20200301':'20200304',['D','C']]# multiple rows from a specific column
df.loc[d[0],['D','C']] # selcect
df.at[d[0],'C'] # to select one column
df.iloc[3:5,0:2] # rows and columns
df[df['A']>0] # filterig data bolloean indexing
df2=df.reindex(index=d[0:4],columns=list(df.columns)+['E']=1)
df2.loc[d[0]:d[1],'E']=1
df2.isnull()
df2.isnull().count()
df2.dropna()
df2.fillna(value=2) # filling null values
pd.isna(df2) # to check for null values
df.mean() # mean for all column
df.mean(1) # mean for 1 column
s= pd.Series([1,2,3,np.nan,4,5,6,7,8,9],index=d).shift(2)
df.sub(s,axis='index')
df.apply()df.apply(np.cumsum)
s=pd.Series(['Edureka','Python','Jupyter',np.nan,'football','world'])
s.str.upper()
df=pd.DataFrame(np.random.randn(10,4))
df2=[df[:3],df[3:7],df[7:]]
pd.concat(df2)
df.groupby(2).sum() # groupby
left=pd.DataFrame({'A':[1,2],'B':[3,4]})
right=pd.DataFrame({'A':[3,2],'D':[4,5]})
pd.merge(left,right,on='A') # MERGE
df2.stack()
df2.unstack()

df=pd.DataFrame({'A':['a','b','c','d']*3,
                 'B':['A','B','C']*4,
                'C':['P','P','P','Q','Q','Q']*2,
                'D':np.random.randn(12),
                'E':np.random.randn(12)})
## Pivot Table
pd.pivot_table(df,values='D',index=['A','B'],columns=['C'])

# Time Series
dates=pd.date_range('20200301',periods=100,freq='S')
ts=pd.Series(np.random.randint(0,500,len(dates)),dates)
# resample
ts.resample('5min').sum()
dates=pd.date_range('3/3/2020 00:00',periods=5,freq='S')
# float ts
ts=pd.Series(np.random.randn(len(dates)),dates)
# UTC timezone
ts_utc=ts.tz_localize('UTC')
ts_utc
# convert
ts_utc.tz_convert('US/Eastern')
# min frequency
dates=pd.date_range('3/3/2020 00:00',periods=5,freq='M')
ts=pd.Series(np.random.randn(len(dates)),dates)
# period
ps= ts.to_period()
ps.to_timestamp()
# student grade
df=pd.DataFrame({'id':[1,2,3,4,5,6],"grade":['a','b','c','b','a','e']})
df
# CATEGORY
df=pd.DataFrame({'id':[1,2,3,4,5,6],"grade":['a','b','c','b','a','e']})
df['Grade']=df['grade'].astype("category")
df["Grade"]
df["Grade"].cat.categories=["very bad","good","very good","excellent"]
df["Grade"]=df["Grade"].cat.set_categories(["very good","bad","very bad","good","medium"])
df["Grade"]

# plotting
ts=pd.Series(np.random.randn(500),index=pd.date_range('1/2/2020',periods=500))
ts=ts.cumsum()
ts.plot()

# file handling
Print("SirJi")
